// Generated by CoffeeScript 1.6.3
(function() {
  var defaults, diceroll, exports, extend, recurse, typeIsArray;

  defaults = {
    dice: null,
    sides: null,
    sum: true,
    onesSubtract: false,
    target: null,
    explodeOn: null,
    modifier: null
  };

  diceroll = function(opts) {
    var conclusion, diceLeft, result, results, rolls;
    rolls = [];
    conclusion = 0;
    results = [];
    conclusion = 0;
    if (typeIsArray(opts)) {
      return recurse(opts);
    } else {
      opts = extend(extend({}, defaults), opts);
      if (opts.explodeOn !== null && opts.explodeOn <= 1) {
        throw new Error("If you set explodeOn to that number, the roll will keep exploding forever.");
      }
      if (opts.dice === null || opts.sides === null) {
        throw new Error("You have to provide dice and sides parameters");
      }
      if (!opts.sum && opts.target === null) {
        throw new Error("If you set sum: false you must set target: <number> as well.");
      }
      diceLeft = opts.dice;
      while (diceLeft) {
        diceLeft--;
        result = Math.ceil(Math.random() * opts.sides);
        rolls.push(result);
        if (!opts.sum && opts.explodeOn !== null && result >= opts.explodeOn) {
          diceLeft++;
        }
        if (opts.sum) {
          conclusion += result;
        } else if (!opts.sum && result >= opts.target) {
          conclusion++;
        } else if (!opts.sum && opts.onesSubtract && result === 1) {
          conclusion--;
        }
      }
      if (opts.sum && opts.target !== null) {
        conclusion = conclusion >= opts.target;
      }
      if (opts.sum && opts.modifier !== null) {
        conclusion += opts.modifier;
      }
      return {
        'rolls': rolls,
        'conclusion': conclusion
      };
    }
  };

  recurse = function(opts) {
    var conclusion, opt, result, roll, rolls, _i, _len;
    rolls = [];
    conclusion = 0;
    for (_i = 0, _len = opts.length; _i < _len; _i++) {
      opt = opts[_i];
      roll = diceroll(opt);
      result = roll;
      rolls.push(result.rolls);
      if (typeof result.conclusion === "number") {
        conclusion += result.conclusion;
      }
    }
    return {
      'rolls': rolls,
      'conclusion': conclusion
    };
  };

  extend = function(object, properties) {
    var key, val;
    for (key in properties) {
      val = properties[key];
      object[key] = val;
    }
    return object;
  };

  typeIsArray = Array.isArray || function(value) {
    return {}.toString.call(value) === '[object Array]';
  };

  exports = module.exports = diceroll;

}).call(this);
